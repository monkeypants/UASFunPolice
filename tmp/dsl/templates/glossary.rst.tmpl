.. _glossary:

Glossary
========

This document uses a mix of (hopefully) plain English with a structured
semantic model to describe the system's functional requirements.
The :ref:`requirements` section is organised by use-case, where each
use-case is implemented as a collection of system feature specifications.

The :ref:`testing` section is organised by actor and then use-case,
where each actor's use-case is described with the collection of
scenarios that the actor could use to evaluate the feature's
implementation.

+-----------+------------------------------------------------+
| subject   | language                                       |
+===========+================================================+
| Use-cases | Plain English                                  |
+-----------+------------------------------------------------+
| Features  | Formal Domain Specific Language (DSL)          |
+-----------+------------------------------------------------+
| Scenarios | Plain english version of the DSL               |
+-----------+------------------------------------------------+


Ultimately, the scenarios (A.K.A. "user stories") are the most important
thing because they are concrete, verifyable and testable. Features and
use-cases are only useful organising principles to help make sense of
the scenarios.


Verb phrases
------------

{{ verbs|length }} verb phrases are used:
{% for verb in verbs %}
 * :ref:`{{ verb }}`{% endfor %}

{% for verb in verbs %}
.. _{{ verb }}:

{{ verb|capitalize }}
{{ '^' * verb|length }}

{{ verb.description }}

{% if verb.results()|length < 1 %}
**{{ verb|capitalize }}** is defined but is not yet used in any feature specifications. **ANALYSIS REQUIRED**.
{% elif verb.results()|length < 2 %}
**{{ verb|capitalize }}** only results in one kind of thing; :ref:`{{ verb.results()|first }}`.

{% else %}
**{{ verb|capitalize }}** can have {{ verb.results()|length }} types of result:
{% for noun in verb.results() %}
 * :ref:`{{ noun }}`{% endfor %}
{% endif %}

{% if verb.objects()|length < 2 %}
**{{ verb|capitalize }}** only acts on one thing; :ref:`{{ verb.objects()|first }}`.
{% else %}
**{{ verb|capitalize }}** acts on {{ verb.objects()|length }} types of thing:
{% for noun in verb.objects() %}
 * :ref:`{{ noun }}`{% endfor %}
{% endif %}

{% if verb.features()|length > 1 %}
{{ verb|capitalize }} is used in {{ verb.features()|length }} features:
{% for feature in verb.features() %}
 * :ref:`{{ feature }}`{% endfor %}
{% endif %}

{% endfor %}


Noun phrases
------------

{{ nouns|length }} noun-phrases are used:
{% for noun in nouns %}
 * :ref:`{{ noun }}`{% endfor %}

{% for noun in nouns %}
.. _{{ noun }}:

{{ noun|capitalize }}
{{ '^' * noun|length }}


{% if noun.result_of()|length < 1 %}
**{{ noun|capitalize }}** is defined but there are not yet any features specified with it as the result. **ANALYSIS REQUIRED**.
{% elif noun.result_of()|length < 2 %}
**{{ noun|capitalize }}** is the result of only one type of action; :ref:`{{ noun.result_of()|first }}`.
{% else %}
**{{ noun|capitalize }}** is the result of {{ noun.result_of()|length }} types of action:
{% for noun in noun.result_of() %}
 * :ref:`{{ noun }}`{% endfor %}
{% endif %}

{% if noun.object_of()|length < 1 %}
**{{ noun|capitalize }}** is defined but there are not yet any features specified where it is the subject. **ANALYSIS REQUIRED**.
{% elif noun.object_of()|length < 2 %}
**{{ noun|capitalize }}** is the subject of only one type of action; :ref:`{{ noun.object_of()|first }}`.
{% else %}
**{{ noun|capitalize }}** is subject to {{ noun.object_of()|length }} types of action:
{% for noun in noun.object_of() %}
 * :ref:`{{ noun }}`{% endfor %}
{% endif %}

{% if noun.features()|length > 1 %}
{{ noun|capitalize }} is used in {{ noun.features()|length }} features:
{% for feature in noun.features() %}
 * :ref:`{{ feature }}`{% endfor %}
{% endif %}

{% endfor %}

